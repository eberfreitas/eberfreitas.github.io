<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title></title>
	<link href="http://www.eberfdias.com/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="http://www.eberfdias.com"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2021-08-08T00:00:00+00:00</updated>
	<id>http://www.eberfdias.com/atom.xml</id>
	<entry xml:lang="en">
		<title>Sobre pregui√ßa, automa√ß√£o, tipos e linguagem funcional</title>
		<published>2021-08-08T00:00:00+00:00</published>
		<updated>2021-08-08T00:00:00+00:00</updated>
		<link rel="alternate" href="http://www.eberfdias.com/blog/preguica/" type="text/html"/>
		<id>http://www.eberfdias.com/blog/preguica/</id>
		<content type="html">&lt;p&gt;Existe aquela frase famosa (que dizem ser) do Bill Gates onde ele diz &lt;strong&gt;&amp;quot;Eu escolho o pregui√ßoso pra fazer o trabalho dif√≠cil porque ele vai encontrar um jeito f√°cil de execut√°-lo&amp;quot;&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Acho exagerado, mas talvez com um pingo de verdade? O termo &lt;em&gt;pregui√ßoso&lt;&#x2F;em&gt; √© um meio pesado e poderia ser substituido por &amp;quot;pessoa que otimiza o tempo&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;N√£o t√¥ falando de um workaholic ou maluco da produtividade. N√£o √© isso... √â s√≥ aquela pessoa que quer usar o seu tempo da maneira mais eficiente naquele instante, seja pra evitar um processo repetitivo ou evitar de se preocupar com o que pode ser cuidado de um jeito mais f√°cil.&lt;&#x2F;p&gt;
&lt;p&gt;Automatizar uma tarefa, torna-l√° mais f√°cil de ser executada, delegar preocupa√ß√µes, parecem ser processos de valoriza√ß√£o e enriquecimento do tempo.&lt;&#x2F;p&gt;
&lt;p&gt;Elm, por exemplo, √© uma linguagem de programa√ß√£o bem restritiva. Ela √© fortemente tipada, imut√°vel e com efeitos colaterais controlados. O que ela cobra na hora de desenvolver dentro dessa estrutura r√≠gida, ela devolve ao garantir a &amp;quot;corretividade&amp;quot; do meu programa e a tranquilidade de que n√£o haver√° erros em tempo de execu√ß√£o.&lt;&#x2F;p&gt;
&lt;p&gt;Quando eu uso Elm, por mais trabalhoso que pare√ßa ser seguir suas regras e limita√ß√µes, eu estou na verdade escolhendo o caminho da pregui√ßa, afinal o computador pode me auxiliar a escrever um programa mais correto sem sobrecarregar o meu c√©rebro. Se ele pode fazer este trabalho (atrav√©s da an√°lise est√°tica por exemplo) ent√£o eu n√£o preciso gastar meu tempo nem espa√ßo mental com isso.&lt;&#x2F;p&gt;
&lt;p&gt;Elm √© um exemplo mas existem outras linguagens como Haskell, Rust, PureScript, etc...&lt;&#x2F;p&gt;
&lt;p&gt;Na hora de escolher uma ferramenta voc√™ pode valorizar a sua popularidade, expressividade, quem banca seu desenvolvimento, etc. Eu, quando poss√≠vel, gosto de escolher valorizar meu tempo.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Pelmodoro - um aplicativo para pomodoro feito em Elm</title>
		<published>2021-07-25T00:00:00+00:00</published>
		<updated>2021-07-25T00:00:00+00:00</updated>
		<link rel="alternate" href="http://www.eberfdias.com/blog/pelmodoro/" type="text/html"/>
		<id>http://www.eberfdias.com/blog/pelmodoro/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.pelmodoro.com&#x2F;&quot;&gt;&lt;strong&gt;Pelmodoro&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; √© um aplicativo para te ajudar a aplicar a &lt;em&gt;t√©cnica pomodoro&lt;&#x2F;em&gt; no seu dia a dia. Se voc√™ ainda n√£o conhece, vale a pena ler sobre na &lt;a href=&quot;https:&#x2F;&#x2F;pt.wikipedia.org&#x2F;wiki&#x2F;T%C3%A9cnica_pomodoro&quot;&gt;Wikipedia&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;2021-07-25-pelmodoro&#x2F;pelmodoro.png&quot; alt=&quot;Pelmodoro&quot; &#x2F;&gt;
J√° existem diversos aplicativos para pomodoro, dos mais variados tipos e complexidades. Depois de alguma experi√™ncia com aplicativos diferentes, eu resolvi tentar fazer o meu pr√≥prio e &lt;strong&gt;Pelmodoro&lt;&#x2F;strong&gt; √© o resultado.&lt;&#x2F;p&gt;
&lt;p&gt;Al√©m do &lt;em&gt;timer&lt;&#x2F;em&gt; normal, que existe em todo aplicativo para pomodoro, coloquei alguns outros recursos:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Personaliza√ß√£o do n√∫mero de rounds e dos tempos de cada sess√£o (trabalho, pausa e pausa longa);&lt;&#x2F;li&gt;
&lt;li&gt;Controle sobre como o timer se comporta ao final de cada sess√£o de trabalho ou pausa;&lt;&#x2F;li&gt;
&lt;li&gt;Controle sobre como voc√™ quer ser notificado do t√©rmino de cada sess√£o;&lt;&#x2F;li&gt;
&lt;li&gt;Temas!!! üé®&lt;&#x2F;li&gt;
&lt;li&gt;Integra√ß√£o com o Spotify para tocar alguma playlist √† sua escolha durante cada round;&lt;&#x2F;li&gt;
&lt;li&gt;Sistema de avalia√ß√£o dos seus rounds de trabalho;&lt;&#x2F;li&gt;
&lt;li&gt;Estat√≠sticas de uso do aplicativo contando o n√∫mero de horas de trabalho, de descanso, etc;&lt;&#x2F;li&gt;
&lt;li&gt;Possibilidade de exportar e importar os seus dados estat√≠sticos;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Al√©m disso &lt;strong&gt;Pelmodoro&lt;&#x2F;strong&gt; √© um &lt;a href=&quot;https:&#x2F;&#x2F;pt.wikipedia.org&#x2F;wiki&#x2F;Progressive_web_app&quot;&gt;PWA&lt;&#x2F;a&gt; &lt;a href=&quot;http:&#x2F;&#x2F;offlinefirst.org&#x2F;&quot;&gt;off-line first&lt;&#x2F;a&gt; o que significa que voc√™ pode instal√°-lo no seu celular ou at√© mesmo no desktop. Eu tenho o usado como uma aplica√ß√£o independente usando o suporte a PWAs do Edge.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;2021-07-25-pelmodoro&#x2F;themes.png&quot; alt=&quot;Pelmodoro com temas&quot; &#x2F;&gt;
&lt;em&gt;Pelmodoro rodando como um PWA no desktop e alguns dos temas que podem ser usados&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;O projeto √© totalmente open-source e voc√™ pode dar uma olhada no c√≥digo no &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eberfreitas&#x2F;pelmodoro&quot;&gt;GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;por-que-criar-mais-um-aplicativo-para-pomodoro&quot;&gt;Por que criar mais um aplicativo para pomodoro?&lt;&#x2F;h2&gt;
&lt;p&gt;N√£o existe s√≥ um motivo, e a resposta poderia ser simplesmente porque eu quis üòÅ Mas al√©m da vontade de criar algo, eu queria usar &lt;a href=&quot;https:&#x2F;&#x2F;elm-lang.org&#x2F;&quot;&gt;&lt;strong&gt;Elm&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, uma linguagem que tenho usado diariamente pelo √∫ltimo ano e meio, mas que nunca tinha criado algo do zero e totalmente meu.&lt;&#x2F;p&gt;
&lt;p&gt;Al√©m disso eu vinha usando o &lt;a href=&quot;https:&#x2F;&#x2F;habitica.com&#x2F;&quot;&gt;Habitica&lt;&#x2F;a&gt; (uma esp√©cie de jogo RPG que tenta te ajudar a cumprir seus objetivos) para acompanhar minha produtividade e tarefas do dia a dia, mas sentia que era um tiro de canh√£o para o que eu precisava. A ideia, principalmente ao desenvolver o sistema de avalia√ß√£o dos rounds, foi substituir o Habitica integrando os recursos que faziam sentido pra mim num aplicativo para pomodoro.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;2021-07-25-pelmodoro&#x2F;calendar.png&quot; alt=&quot;Calend√°rio com estat√≠sticas&quot; &#x2F;&gt;
&lt;em&gt;O calend√°rio das estat√≠sticas tamb√©m serve como gr√°fico mostrando seus dias mais produtivos, inspirando no gr√°fico do GitHub&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fazendo-funcionar&quot;&gt;Fazendo funcionar&lt;&#x2F;h2&gt;
&lt;p&gt;A principal ferramenta que usei pra criar a aplica√ß√£o foi a linguagem &lt;a href=&quot;https:&#x2F;&#x2F;elm-lang.org&#x2F;&quot;&gt;&lt;strong&gt;Elm&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; e seu ecossistema, que n√£o √© muito extenso, mas que oferece muita qualidade e me surpreendeu durante o desenvolvimento.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Elm&lt;&#x2F;strong&gt; √© uma linguagem funcional, fortemente tipada e pura (com efeitos colaterais controlados) voltada para a cria√ß√£o de front-ends e, apesar de n√£o ser uma linguagem extremamente popular, foi tranquilizador ver que muitos dos problemas que eu precisava resolver j√° haviam sido solucionados.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Para a renderiza√ß√£o do timer eu usei SVG e o excelente &lt;a href=&quot;https:&#x2F;&#x2F;package.elm-lang.org&#x2F;packages&#x2F;elm&#x2F;svg&#x2F;latest&#x2F;&quot;&gt;pacote oficial&lt;&#x2F;a&gt; para a cria√ß√£o e manipula√ß√£o de documentos SVG;&lt;&#x2F;li&gt;
&lt;li&gt;Usei o &lt;a href=&quot;https:&#x2F;&#x2F;package.elm-lang.org&#x2F;packages&#x2F;elm&#x2F;svg&#x2F;latest&#x2F;&quot;&gt;elm-css&lt;&#x2F;a&gt; para o CSS, que me permite definir os estilos de maneira tipada e din√¢mica;&lt;&#x2F;li&gt;
&lt;li&gt;Para a manipula√ß√£o de datas eu usei o pacote &lt;a href=&quot;https:&#x2F;&#x2F;package.elm-lang.org&#x2F;packages&#x2F;justinmimbs&#x2F;date&#x2F;latest&#x2F;&quot;&gt;date&lt;&#x2F;a&gt;;&lt;&#x2F;li&gt;
&lt;li&gt;A cria√ß√£o do calend√°rio na √°rea de estat√≠sticas foi facilmente resolvido com o pacote &lt;a href=&quot;https:&#x2F;&#x2F;package.elm-lang.org&#x2F;packages&#x2F;abradley2&#x2F;elm-calendar&#x2F;latest&#x2F;&quot;&gt;calendar&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Para alguns outros recursos, n√£o tive op√ß√£o a n√£o ser apelar para o JavaScript em si, principalmente na integra√ß√£o com o Spotify. Por sorte o Spotify tem uma &lt;a href=&quot;https:&#x2F;&#x2F;developer.spotify.com&#x2F;documentation&#x2F;web-api&#x2F;&quot;&gt;documenta√ß√£o razoavelmente completa&lt;&#x2F;a&gt; sobre como utilizar sua API. Depois de um pouco de problemas lutando com o esquema de autoriza√ß√£o usando &lt;a href=&quot;https:&#x2F;&#x2F;developer.spotify.com&#x2F;documentation&#x2F;general&#x2F;guides&#x2F;authorization-guide&#x2F;#authorization-code-flow-with-proof-key-for-code-exchange-pkce&quot;&gt;PKCE&lt;&#x2F;a&gt;, implementar a integra√ß√£o foi bem tranquilo.&lt;&#x2F;p&gt;
&lt;p&gt;Al√©m disso, para persistir o estado do aplicativo fiz uso tanto do &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;pt-BR&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Window&#x2F;localStorage&quot;&gt;localStorage&lt;&#x2F;a&gt; (para as prefer√™ncias e o estado do timer), quanto do &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;pt-BR&#x2F;docs&#x2F;Web&#x2F;API&#x2F;IndexedDB_API&quot;&gt;IndexedDB&lt;&#x2F;a&gt; (para salvar as estat√≠sticas de uso). Ao inv√©s de usar a API do IndexedDB diretamente, utilizei a excelente biblioteca &lt;a href=&quot;https:&#x2F;&#x2F;dexie.org&#x2F;&quot;&gt;Dexie&lt;&#x2F;a&gt; que abstrai grande parte das complexidades de lidar com IndexedDB.&lt;&#x2F;p&gt;
&lt;p&gt;Para executar os sons de notifica√ß√£o usei a lib &lt;a href=&quot;https:&#x2F;&#x2F;howlerjs.com&#x2F;&quot;&gt;howler.js&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;2021-07-25-pelmodoro&#x2F;sentiment.png&quot; alt=&quot;Avalia√ß√£o dos rounds&quot; &#x2F;&gt;
&lt;em&gt;Avalie cada round de trabalho e verifique suas estat√≠sticas&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tornando-belo&quot;&gt;Tornando belo&lt;&#x2F;h2&gt;
&lt;p&gt;Depois de me sentir satisfeito com os recursos implementados e a maneira como tudo estava funcionando, mostrei o trabalho para algumas pessoas que me deram feedbacks muito importantes, principalmente a respeito da estrutura do meu c√≥digo. Em um per√≠odo de aproximadamente 2 dias eu reescrevi a estrutura da aplica√ß√£o refatorando a arquitetura quase que por completo. Ao final eu tinha um PR com a adi√ß√£o de &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;eber_freitas&#x2F;status&#x2F;1418434236084797443&quot;&gt;5.934 linhas e a remo√ß√£o de 3.756&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Em um projeto deste tamanho, escrito totalmente em JavaScript, este seria um PR assustador, mas como ele foi feito com Elm, eu tinha garantias de que o meu c√≥digo estava correto e compilando normalmente, o que me deu a tranquilidade de fazer o merge do PR sem pensar duas vezes.&lt;&#x2F;p&gt;
&lt;p&gt;A estrutura original do c√≥digo foi sendo constru√≠da organicamente conforme os recursos iam sendo desenvolvidos, o que gerou um c√≥digo funcional mas √†s vezes mal organizado e usando alguns &lt;em&gt;anti-patterns&lt;&#x2F;em&gt;. Um exemplo destes anti-patterns foi a separa√ß√£o dos m√≥dulos &lt;code&gt;Model&lt;&#x2F;code&gt;, &lt;code&gt;Msg&lt;&#x2F;code&gt; e &lt;code&gt;Types&lt;&#x2F;code&gt;. A ideia em separar estes m√≥dulos foi de evitar &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;elm&#x2F;compiler&#x2F;blob&#x2F;9d97114702bf6846cab622a2203f60c2d4ebedf2&#x2F;hints&#x2F;import-cycles.md&quot;&gt;importa√ß√µes c√≠clicas&lt;&#x2F;a&gt;, mas o que ela acabou demonstrando foram falhas na organiza√ß√£o do meu c√≥digo.&lt;&#x2F;p&gt;
&lt;p&gt;Usando o c√≥digo da aplica√ß√£o &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rtfeldman&#x2F;elm-spa-example&quot;&gt;Real World&lt;&#x2F;a&gt;, pude ver como √© poss√≠vel organizar melhor os m√≥dulos em partes separadas onde cada uma implementa o seu pr√≥prio loop de MVU (model-view-update), mantendo o m√≥dulo &lt;code&gt;Main.elm&lt;&#x2F;code&gt; como um &lt;em&gt;hub&lt;&#x2F;em&gt; que agrega cada &amp;quot;p√°gina&amp;quot; da aplica√ß√£o.&lt;&#x2F;p&gt;
&lt;p&gt;A minha fun√ß√£o &lt;code&gt;update&lt;&#x2F;code&gt; original &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eberfreitas&#x2F;pelmodoro&#x2F;blob&#x2F;6d4a9e16b254d6b27fd2d5c8699657bbcb6b226d&#x2F;src&#x2F;Main.elm#L465&quot;&gt;era gigantesca&lt;&#x2F;a&gt;, mas depois pude separar as mensagens para cada &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eberfreitas&#x2F;pelmodoro&#x2F;tree&#x2F;main&#x2F;src&#x2F;Page&quot;&gt;p√°gina&lt;&#x2F;a&gt; mantendo o c√≥digo mais organizado, contido e f√°cil de entender.&lt;&#x2F;p&gt;
&lt;p&gt;D√° pra falar muita coisa sobre padr√µes de estrutura de c√≥digo em Elm mas recomendo a leitura do &lt;a href=&quot;https:&#x2F;&#x2F;sporto.github.io&#x2F;elm-patterns&#x2F;&quot;&gt;Elm patterns&lt;&#x2F;a&gt; para uma vis√£o mais geral dos principais padr√µes.&lt;&#x2F;p&gt;
&lt;p&gt;Al√©m da reestrutura√ß√£o da aplica√ß√£o, eu acabei implementando algumas decis√µes mais estil√≠sticas para trazer algum senso de padroniza√ß√£o pro c√≥digo e que eu acho, pessoalmente, que tem seus benef√≠cios:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Evitar exposi√ß√£o de construtores na defini√ß√£o de m√≥dulos;&lt;&#x2F;li&gt;
&lt;li&gt;Evitar expor tipos e fun√ß√µes na importa√ß√£o de m√≥dulos;&lt;&#x2F;li&gt;
&lt;li&gt;Quando fizer alias na importa√ß√£o de um m√≥dulo, utilizar o mesmo nome do m√≥dulo em si, simulando o comportamento do &lt;code&gt;alias&lt;&#x2F;code&gt; em Elixir. Ex.: &lt;code&gt;Html.Attributes as Attributes&lt;&#x2F;code&gt;;&lt;&#x2F;li&gt;
&lt;li&gt;No caso de colis√£o de nomes optar por a) n√£o usar alias algum ou b) aglomerar os nomes dos m√≥dulos. Ex.: &lt;code&gt;Svg.Attributes as SvgAttributes&lt;&#x2F;code&gt;;&lt;&#x2F;li&gt;
&lt;li&gt;Prefixar fun√ß√µes de view com &lt;code&gt;view&lt;&#x2F;code&gt; üëÄ&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Na maioria dos casos estas decis√µes foram tomadas pra tornar o c√≥digo mais expl√≠cito, deixando claro de onde est√£o vindo as fun√ß√µes e tipos que est√£o sendo utilizados e quais s√£o os seus efeitos.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;2021-07-25-pelmodoro&#x2F;hourly.png&quot; alt=&quot;Horas mais produtivas&quot; &#x2F;&gt;
&lt;em&gt;Estat√≠sticas mensais, incluindo seus hor√°rios de trabalho mais produtivos&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pensamentos-finais&quot;&gt;Pensamentos finais&lt;&#x2F;h2&gt;
&lt;p&gt;Apesar da refatora√ß√£o grande que fiz, sei que a estrutura ainda poderia melhorar em v√°rios lugares, mas eu quero dar este projeto como finalizado. Eu sinto que software √© algo que nunca est√° realmente pronto, tirando algumas j√≥ias raras, mas eu preciso parar de colocar tanto tempo neste projeto que j√° funciona muito bem e supre as minhas necessidades e me afundar em algum outro projeto paralelo que vai consumir todo meu tempo livre ü§°&lt;&#x2F;p&gt;
&lt;p&gt;No geral eu estou muito satisfeito com o resultado final e tenho usado o aplicativo diariamente. Com sorte, o aplicativo tamb√©m ser√° √∫til para outras pessoas e se este for o seu caso eu vou ficar extremamente feliz se voc√™ me contar depois üòä&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Blog novo de novo</title>
		<published>2021-01-18T00:00:00+00:00</published>
		<updated>2021-01-18T00:00:00+00:00</updated>
		<link rel="alternate" href="http://www.eberfdias.com/blog/blog-novo-de-novo/" type="text/html"/>
		<id>http://www.eberfdias.com/blog/blog-novo-de-novo/</id>
		<content type="html">&lt;p&gt;Acho que a √∫ltima vez que tive um blog neste dom√≠nio foi em 2013! Praticamente 8 anos. Pois√©...&lt;&#x2F;p&gt;
&lt;p&gt;A algum tempo venho escrevendo alguns posts mais t√©cnicos no meu perfil no &lt;a href=&quot;https:&#x2F;&#x2F;dev.to&#x2F;eberfreitas&quot;&gt;DEV&lt;&#x2F;a&gt; numa frequ√™ncia de mais ou menos um post por ano (uau), e achei que seria legal trazer estes posts para meu pr√≥prio espa√ßo, bem como resgatar alguns textos antigos.&lt;&#x2F;p&gt;
&lt;p&gt;Aqui voc√™ vai encontrar alguns posts desde 2007. Nem tudo est√° listado mas os posts mais desatualizados ou constragedores voc√™ encontra direto no &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eberfreitas&#x2F;eberfreitas.github.io&quot;&gt;reposit√≥rio&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Pra esta vers√£o do blog eu tentei usar ferramentas f√°ceis e simples, e espero que o resultado no geral seja agrad√°vel.&lt;&#x2F;p&gt;
&lt;p&gt;Pro sistema de blog em si estou usando o excelente &lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;&quot;&gt;Zola&lt;&#x2F;a&gt;, um gerador de sites est√°ticos escrito em Rust.&lt;&#x2F;p&gt;
&lt;p&gt;E pra economizar tempo e c√©rebro no front, eu estou usando o pr√°tico &lt;a href=&quot;https:&#x2F;&#x2F;oxal.org&#x2F;projects&#x2F;sakura&#x2F;&quot;&gt;sakura&lt;&#x2F;a&gt; para dar estilos ao meu HTML mesmo sem o uso de classes. N√£o √© nada revolucion√°rio mas tamb√©m n√£o fica feio.&lt;&#x2F;p&gt;
&lt;p&gt;Eu espero escrever aqui com mais frequ√™ncia agora e j√° tenho na manga alguns posts bacanas que pretendo escrever em breve. Enquanto isso d√° pra ler a meia d√∫zia de posts antigos que eu coloquei por aqui.&lt;&#x2F;p&gt;
&lt;p&gt;At√© breve!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Elm no servidor (ou em qualquer lugar) com promises</title>
		<published>2021-01-04T00:00:00+00:00</published>
		<updated>2021-01-04T00:00:00+00:00</updated>
		<link rel="alternate" href="http://www.eberfdias.com/blog/elm-no-servidor-ou-em-qualquer-lugar-com-promises/" type="text/html"/>
		<id>http://www.eberfdias.com/blog/elm-no-servidor-ou-em-qualquer-lugar-com-promises/</id>
		<content type="html">&lt;p&gt;Elm foi criado pra rodar no browser, mas sempre rola de algu√©m perguntar como rodar Elm no servidor.&lt;&#x2F;p&gt;
&lt;p&gt;No meu trabalho atual, a gente precisava sincronizar diversos clientes e persistir o estado compartilhado entre eles em um s√≥ lugar, ent√£o pensamos que seria uma boa ideia se o servidor agisse como mais um cliente que pudesse persistir este estado em um local centralizado.&lt;&#x2F;p&gt;
&lt;p&gt;Pra isso a gente criou um servidor com Node&#x2F;Express que era uma grande gambiarra.&lt;&#x2F;p&gt;
&lt;p&gt;Num ambiente de servidor, na maioria das vezes voc√™ vai ter um request&#x2F;pedido e uma response&#x2F;resposta amarrados. Voc√™ pede algo e recebe o que pediu ou um erro. N√£o importa, pra cada request existe uma resposta.&lt;&#x2F;p&gt;
&lt;p&gt;Mas Elm n√£o funciona assim se voc√™ precisa falar com o mundo externo. Sim, voc√™ pode usar &lt;a href=&quot;https:&#x2F;&#x2F;guide.elm-lang.org&#x2F;interop&#x2F;ports.html&quot;&gt;ports&lt;&#x2F;a&gt; pra comunica√ß√£o externa, mas ports usam o actor model de passagem de mensagens. Ent√£o ao inv√©s de um request&#x2F;response como voc√™ teria em um servidor, voc√™ s√≥ pode enviar e receber mensagens. Pode parecer a mesma coisa mas n√£o √©. Voc√™ pode receber uma mensagem sem nunca ter requisitado uma em primeiro lugar. Ou enviar uma mensagem sem a necessidade de esperar outra de volta. Voc√™ pode mandar uma mensagem e receber in√∫meras outras de uma s√≥ vez. N√£o existe liga√ß√£o entre as mensagens enviadas e recebidas, e este √© um fator que torna Elm impr√≥prio para a cria√ß√£o de servidores onde o request&#x2F;response s√£o sempre amarrados.&lt;&#x2F;p&gt;
&lt;p&gt;Depois de procurar por solu√ß√µes melhores eu encontrei &lt;a href=&quot;https:&#x2F;&#x2F;discourse.elm-lang.org&#x2F;t&#x2F;imitating-synchronicity-with-ports&#x2F;1930&quot;&gt;este post&lt;&#x2F;a&gt; nos f√≥runs onde o usu√°rio &lt;a href=&quot;https:&#x2F;&#x2F;discourse.elm-lang.org&#x2F;u&#x2F;joakin&quot;&gt;joakin&lt;&#x2F;a&gt; fez uma sugest√£o engenhosa: basta enviar o objeto de &lt;strong&gt;response&lt;&#x2F;strong&gt; do lado do JavaScript atrav√©s do port e mand√°-lo de volta com a resposta de qualquer coisa que tenha sido requisitada. A√≠ √© s√≥ usar este objeto para enviar a resposta apropriada para o client correto e pronto. Voc√™ pode ver um exemplo dessa abordagem &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;joakin&#x2F;node-elm-server&quot;&gt;neste reposit√≥rio exemplo&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Ta a√≠ uma coisa que eu n√£o sabia: voc√™ pode enviar qualquer valor JavaScript como um &lt;a href=&quot;https:&#x2F;&#x2F;package.elm-lang.org&#x2F;packages&#x2F;elm&#x2F;json&#x2F;latest&#x2F;Json-Decode#Value&quot;&gt;&lt;code&gt;Json.Decode.Value&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; pro Elm, at√© mesmo fun√ß√µes. Claro que n√£o ser√° poss√≠vel fazer muita coisa com elas dentro do Elm mas, neste caso, ajuda a amarrar uma chamada de fun√ß√£o √† mensagem que retornaremos.&lt;&#x2F;p&gt;
&lt;p&gt;A ideia √© √≥tima e nos ajudou a amarrar o fluxo de request&#x2F;response. Mas como poder√≠amos testar esta integra√ß√£o? Era mais f√°cil pular toda a parte do servidor e focar na interopera√ß√£o entre Elm e Node diretamente. Ou pior, e se o software que estiv√©ssemos escrevendo n√£o fosse um servidor Express mas qualquer outra coisa? Foi a√≠ que meu chefe e colega de trabalho &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;nateabele&quot;&gt;Nate&lt;&#x2F;a&gt; sugeriu que us√°ssemos promises. Ao inv√©s de enviar o objeto de response do Express pro Elm, podemos enviar a fun√ß√£o de resolve de uma promise!&lt;&#x2F;p&gt;
&lt;p&gt;Eu fiz um fork do reposit√≥rio exemplo com estas altera√ß√µes. Voc√™ pode checar &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eberfreitas&#x2F;node-elm-server&quot;&gt;aqui&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Do &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eberfreitas&#x2F;node-elm-server&#x2F;blob&#x2F;master&#x2F;src&#x2F;Server.elm&quot;&gt;lado do Elm&lt;&#x2F;a&gt;, nada de significativo mudou. Eu fiz apenas umas altera√ß√µes nos nomes das coisas pra melhor refletir a nova natureza da interopera√ß√£o com com o c√≥digo JavaScript. Mas al√©m disso, n√£o precisamos fazer outras altera√ß√µes j√° que, tanto o objeto response do Express quanto a fun√ß√£o resolve da promise s√£o apenas &lt;code&gt;Json.Decode.Value&lt;&#x2F;code&gt;s pro Elm.&lt;&#x2F;p&gt;
&lt;p&gt;A m√°gica real acontece no &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eberfreitas&#x2F;node-elm-server&#x2F;blob&#x2F;master&#x2F;index.js&quot;&gt;c√≥digo JavaScript&lt;&#x2F;a&gt;. O c√≥digo ficou um pouco mais complexo mas conseguimos desacoplar o c√≥digo Elm e os ports do Express, tornando poss√≠vel usar esta abordagem em praticamente qualquer lugar. Aqui esta a parte que faz tudo funcionar:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#fdf6e3;color:#657b83;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;http
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;createServer&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Promise&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;resolve =&amp;gt; app&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;onRequest&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;resolve &lt;&#x2F;span&gt;&lt;span&gt;}))
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span&gt;(({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;response &lt;&#x2F;span&gt;&lt;span&gt;}) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;statusCode &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      });
&lt;&#x2F;span&gt;&lt;span&gt;  })
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;listen&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;resolve&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span&gt;(([{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;resolve &lt;&#x2F;span&gt;&lt;span&gt;}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;resolve&lt;&#x2F;span&gt;&lt;span&gt;({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;response &lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Sendo assim, √© poss√≠vel usar Elm no servidor, e eu diria que √© poss√≠vel usar esta abordagem em qualquer lugar onde voc√™ precise de uma integra√ß√£o com request&#x2F;response amarradas e Node esteja dispon√≠vel. &lt;strong&gt;Mas √© √∫til?&lt;&#x2F;strong&gt; No nosso caso, onde quer√≠amos reutilizar a maior parte do c√≥digo de nosso client no server foi uma vit√≥ria total, mas eu pensaria duas vezes antes de construir um servidor completo com Elm, j√° que ele n√£o oferece as ferramentas necess√°rias pra permitir uma experi√™ncia de desenvolvimento satisfat√≥ria, embora seja poss√≠vel.&lt;&#x2F;p&gt;
&lt;p&gt;Talvez &lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;ZnYa99QoznE?t=4755&quot;&gt;Roc&lt;&#x2F;a&gt; seja a linguagem apropriada para estes casos. Mal posso esperar!&lt;&#x2F;p&gt;
&lt;p&gt;E ent√£o, o que achou desta abordagem? Voc√™ j√° teve que fazer algo similar ou totalmente diferente pra resolver o mesmo problema?&lt;&#x2F;p&gt;
&lt;p&gt;Obrigado por ler!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Comparando Elm a Ember Octane e React</title>
		<published>2020-05-12T00:00:00+00:00</published>
		<updated>2020-05-12T00:00:00+00:00</updated>
		<link rel="alternate" href="http://www.eberfdias.com/blog/comparando-elm-a-ember-octane-e-react/" type="text/html"/>
		<id>http://www.eberfdias.com/blog/comparando-elm-a-ember-octane-e-react/</id>
		<content type="html">&lt;p&gt;Hoje me deparei com o artigo &amp;quot;&lt;a href=&quot;https:&#x2F;&#x2F;www.pzuraq.com&#x2F;comparing-ember-octane-and-react&#x2F;&quot;&gt;Comparing Ember Octane and React&lt;&#x2F;a&gt;&amp;quot; no Hacker News.&lt;&#x2F;p&gt;
&lt;p&gt;Ele tenta demonstrar como uma mesma aplica√ß√£o pode ser constru√≠da tanto com React quanto Ember, detalhando suas implementa√ß√µes e chegando a algumas conclus√µes a partir disto. A aplica√ß√£o √© um simples sistema de busca do Hacker News que voc√™ pode testar aqui:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;codesandbox.io&#x2F;s&#x2F;github&#x2F;the-road-to-learn-react&#x2F;hacker-stories&#x2F;tree&#x2F;hs&#x2F;Async-Await-in-React&quot;&gt;React&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;glitch.com&#x2F;~comparing-ember-octane-and-react&quot;&gt;Ember&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Ao final do artigo, o autor (&lt;a href=&quot;https:&#x2F;&#x2F;www.pzuraq.com&#x2F;author&#x2F;pzuraq&#x2F;&quot;&gt;Chris Garrett&lt;&#x2F;a&gt;, que √© um membro do core team do Ember) escreve:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Escrevendo este post, eu sinto que pude experimentar React com hooks de forma muito mais profunda que nas minhas pesquisas anteriores, e eu gostei muito do que aprendi. √â um modelo de programa√ß√£o interessante, e enquanto n√£o esteja totalmente convencido ainda (pessoalmente eu acho que prefiro algo mais parecido com &lt;strong&gt;Elm&lt;&#x2F;strong&gt;), posso ver claramente porque as pessoas gostam dele e quais s√£o suas vantagens.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Isso me fez pensar: como seria a vers√£o Elm da mesma aplica√ß√£o? Ent√£o eu tentei contru√≠-la! Voc√™ pode ver o resultado final &lt;a href=&quot;https:&#x2F;&#x2F;ellie-app.com&#x2F;8Rn7dL9RKyWa1&quot;&gt;aqui&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Como no post original, vamos dar uma olhada mais profunda no que est√° acontecendo.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;getting-started&quot;&gt;Getting started&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;elm&quot; style=&quot;background-color:#fdf6e3;color:#657b83;&quot; class=&quot;language-elm &quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;port module Main exposing &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Browser
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Browser.Dom &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Dom
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Html &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;exposing &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Html&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;hr&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;strong&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Html.Attributes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;exposing &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;disabled&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;type_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Html.Events &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;exposing &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;onClick&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;onInput&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Http
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Json.Decode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Decode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;exposing &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Decoder&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Task
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;port &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sendQuery &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Cmd msg
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;√â assim que a maioria das aplica√ß√µes Elm (e arquivos) come√ßam. Voc√™ define o nome do m√≥dulo do arquivo e explicitamente declara o que quer expor e importar de outros m√≥dulos. Elm tem seu pr√≥prio package manager e quando voc√™ cria um novo projeto, ele ir√° instalar alguns pacotes b√°sicos. N√≥s tivemos que instalar alguns pacotes extras como &lt;code&gt;elm&#x2F;json&lt;&#x2F;code&gt; e &lt;code&gt;elm&#x2F;http&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Uma coisa importante do nosso m√≥dulo √© que ele come√ßa com o texto &lt;code&gt;port module&lt;&#x2F;code&gt;. Caso voc√™ nunca tenha ouvido falar de Elm, ela √© uma linguagem funcional totalmente pura que n√£o pode ter efeitos colaterais. Isso significa que n√£o podemos, por exemplo, definir coisas no nosso &lt;code&gt;localStorage&lt;&#x2F;code&gt; a partir do c√≥digo Elm. √â a√≠ que ports entram, mas vamos falar mais sobre isso depois. No final desta se√ß√£o declaramos um port chamado &lt;code&gt;sendQuery&lt;&#x2F;code&gt; que usaremos mais √† frente.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elm&quot; style=&quot;background-color:#fdf6e3;color:#657b83;&quot; class=&quot;language-elm &quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;type alias &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Story &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;String
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;String
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;String
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; url &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;String
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; comments &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Int
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; points &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Int
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;type alias &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;String
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; lastSearch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;String
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; stories &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Stories
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Stories
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Loading
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Error
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Stories &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;List Story&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Msg
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;NoOp
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;GotInput String
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Search
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Dismiss String
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;GotResults &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Result Http&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Error Stories&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Aqui temos as defini√ß√µes dos nossos tipos. Elm √© uma linguagem forte e estaticamente tipada. Isso significa que podemos criar nossos pr√≥prios tipos para modelar nossa aplica√ß√£o. Promeiro temos dois tipos alias: &lt;code&gt;Story&lt;&#x2F;code&gt; e &lt;code&gt;Model&lt;&#x2F;code&gt;. Um tipo alias √© um tipo que d√° um apelido a uma estrutura j√° conhecida. Desta forma podemos depender do compilador pra nos ajudar a escrever c√≥digos corretos o tempo todo.&lt;&#x2F;p&gt;
&lt;p&gt;Depois temos dois tipos customizados: &lt;code&gt;Stories&lt;&#x2F;code&gt; e &lt;code&gt;Msg&lt;&#x2F;code&gt;. Estes tipos ir√£o nos ajudar entender melhor o estado da nossa aplica√ß√£o e o que devemos fazer a seu respeito.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;a-tea&quot;&gt;A TEA&lt;&#x2F;h1&gt;
&lt;p&gt;A TEA (ou The Elm Architecture) √© uma forma de descrever como a maioria das aplica√ß√µes Elm funcionam e como os dados fluem atrav√©s de nosso c√≥digo. Ela consiste em alguns conceitos b√°sicos:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Temos um estado global;&lt;&#x2F;li&gt;
&lt;li&gt;Este estado √© renderizado usando alguma fun√ß√£o &lt;code&gt;view&lt;&#x2F;code&gt;;&lt;&#x2F;li&gt;
&lt;li&gt;A &lt;code&gt;view&lt;&#x2F;code&gt; pode enviar mensagens de algum tipo para a fun√ß√£o &lt;code&gt;update&lt;&#x2F;code&gt; (imagine um clique de bot√£o ou o envio de um formul√°rio);&lt;&#x2F;li&gt;
&lt;li&gt;Por fim, o &lt;code&gt;update&lt;&#x2F;code&gt; muta o estado que ent√£o √© renderizado novamente pela &lt;code&gt;view&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;E √© isso! Ent√£o vamos construir estas fun√ß√µes:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elm&quot; style=&quot;background-color:#fdf6e3;color:#657b83;&quot; class=&quot;language-elm &quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;update &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Msg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; ( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Model&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Cmd Msg&lt;&#x2F;span&gt;&lt;span&gt; )
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;update &lt;&#x2F;span&gt;&lt;span&gt;msg model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;msg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;NoOp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt; model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;none &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;GotInput&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;( {&lt;&#x2F;span&gt;&lt;span&gt; model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;none &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Search &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;=&lt;&#x2F;span&gt;&lt;span&gt; model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;lastSearch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;( {&lt;&#x2F;span&gt;&lt;span&gt; model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; lastSearch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; stories &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Loading &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;batch
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; request model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;input
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; sendQuery model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;input
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; focusSearch
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt; model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;none &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Dismiss&lt;&#x2F;span&gt;&lt;span&gt; id_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;let
&lt;&#x2F;span&gt;&lt;span&gt;                stories_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;stories &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Stories&lt;&#x2F;span&gt;&lt;span&gt; s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Stories &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;filter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;(.&lt;&#x2F;span&gt;&lt;span&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;(&#x2F;=)&lt;&#x2F;span&gt;&lt;span&gt; id_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt; s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                        _ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                            model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;stories
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;( {&lt;&#x2F;span&gt;&lt;span&gt; model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; stories &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; stories_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;none &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;GotResults&lt;&#x2F;span&gt;&lt;span&gt; res &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;res &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt; e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;let
&lt;&#x2F;span&gt;&lt;span&gt;                        _ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Debug&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;log &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; e
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;( {&lt;&#x2F;span&gt;&lt;span&gt; model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; stories &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;none &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt; s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;( {&lt;&#x2F;span&gt;&lt;span&gt; model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; stories &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;none &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Html Msg
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;view &lt;&#x2F;span&gt;&lt;span&gt;model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[] &amp;lt;|
&lt;&#x2F;span&gt;&lt;span&gt;        h1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[] [&lt;&#x2F;span&gt;&lt;span&gt; text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;My Hacker Stories&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; searchForm model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;input
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt; stories model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;stories
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;searchForm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Html Msg&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;searchForm &lt;&#x2F;span&gt;&lt;span&gt;input_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; label &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;] [&lt;&#x2F;span&gt;&lt;span&gt; strong &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[] [&lt;&#x2F;span&gt;&lt;span&gt; text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Search:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;] ]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; value input_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; onInput &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;GotInput&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; type_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;] []
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; disabled &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;input_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;),&lt;&#x2F;span&gt;&lt;span&gt; onClick &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Search &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;] [&lt;&#x2F;span&gt;&lt;span&gt; text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Submit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; hr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[] []
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stories &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Stories &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Html Msg&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stories &lt;&#x2F;span&gt;&lt;span&gt;stories_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;stories_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Loading &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[] [&lt;&#x2F;span&gt;&lt;span&gt; text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Loading ...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;] ]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[] [&lt;&#x2F;span&gt;&lt;span&gt; text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Something went wrong ...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;] ]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Stories &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[] -&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[] [&lt;&#x2F;span&gt;&lt;span&gt; text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;No results.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;] ]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Stories&lt;&#x2F;span&gt;&lt;span&gt; list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;map storyItem list
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;storyItem &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; span &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[] [&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; href i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;url &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;] [&lt;&#x2F;span&gt;&lt;span&gt; text i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;] ]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; span &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[] [&lt;&#x2F;span&gt;&lt;span&gt; text i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; span &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[] [&lt;&#x2F;span&gt;&lt;span&gt; text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;fromInt i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;comments&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;) ]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; span &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[] [&lt;&#x2F;span&gt;&lt;span&gt; text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;fromInt i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;points&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;) ]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; span &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[] [&lt;&#x2F;span&gt;&lt;span&gt; button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; onClick &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Dismiss&lt;&#x2F;span&gt;&lt;span&gt; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;) ] [&lt;&#x2F;span&gt;&lt;span&gt; text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Dismiss&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;] ]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Aqui temos uma fun√ß√£o &lt;code&gt;update&lt;&#x2F;code&gt; que ir√° receber nosso model (estado) e mensagem. Lembra dos nossos tipos &lt;code&gt;Model&lt;&#x2F;code&gt; e &lt;code&gt;Msg&lt;&#x2F;code&gt;? Vamos us√°-los aqui. Precisamos checar qual &lt;code&gt;Msg&lt;&#x2F;code&gt; estamos recebendo para realizar as mudan√ßas apropriadas ao &lt;code&gt;Model&lt;&#x2F;code&gt;. E se voc√™ estiver prestando aten√ß√£o vai ver que n√≥s n√£o retornamos apenas o &lt;code&gt;Model&lt;&#x2F;code&gt;, mas tamb√©m um &lt;code&gt;Cmd msg&lt;&#x2F;code&gt; (comando). Lembra quando eu disse que Elm n√£o tem efeitos colaterais? Pra resolver este problema temos comandos, que s√£o um tipo especial que entregamos pro runtime do Elm resolver pra gente. Pode ser, por exemplo, uma requisi√ß√£o HTTP como a que estamos fazendo quando &lt;code&gt;Msg&lt;&#x2F;code&gt; √© &lt;code&gt;Seach&lt;&#x2F;code&gt;. Mais sobre isso depois...&lt;&#x2F;p&gt;
&lt;p&gt;Depois disso, temos algumas fun√ß√µes especiais que ir√£o retornar o tipo &lt;code&gt;Html&lt;&#x2F;code&gt;. Elas n√£o retornam HTML em si, mas √© assim que implementamos templates e componentes com Elm. Usando apenas fun√ß√µes! O runtime do Elm vai se encarregar de renderizar o HTML correto a partir delas.&lt;&#x2F;p&gt;
&lt;p&gt;Agora vamos juntar tudo:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elm&quot; style=&quot;background-color:#fdf6e3;color:#657b83;&quot; class=&quot;language-elm &quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Program String Model Msg
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Browser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;element
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; init &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;\&lt;&#x2F;span&gt;&lt;span&gt;query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;( {&lt;&#x2F;span&gt;&lt;span&gt; input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; lastSearch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; stories &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Loading &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;batch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; request query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; focusSearch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; view
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; update &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; update
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; subscriptions &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; always &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Sub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;none
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A fun√ß√£o &lt;code&gt;main&lt;&#x2F;code&gt; √© o ponto de entrada da nossa aplica√ß√£o. √â a fun√ß√£o que o runtime do Elm vai olhar assim que tudo for inicializado. Aqui estamos dizendo explicitamente quais fun√ß√µes nossa aplica√ß√£o deve usar pra cada passo da TEA. a chave &lt;code&gt;init&lt;&#x2F;code&gt; √© uma fun√ß√£o que deve retornar nosso model (estado) inicial. As chaves &lt;code&gt;view&lt;&#x2F;code&gt; e &lt;code&gt;update&lt;&#x2F;code&gt; n√£o precisam de maiores explica√ß√µes. Por fim, temos a &lt;code&gt;subscriptions&lt;&#x2F;code&gt; que n√£o vamos usar mas que se voc√™ estiver curioso pode dar uma olhada no &lt;a href=&quot;https:&#x2F;&#x2F;guide.elm-lang.org&#x2F;&quot;&gt;elm guide&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;o-que-ficou-faltando&quot;&gt;O que ficou faltando&lt;&#x2F;h1&gt;
&lt;p&gt;Por fim temos algumas fun√ß√µes extras que ir√£o tornar a intera√ß√£o com nossa aplica√ß√£o mais din√¢mica:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elm&quot; style=&quot;background-color:#fdf6e3;color:#657b83;&quot; class=&quot;language-elm &quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;focusSearch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Cmd Msg
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;focusSearch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Task&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;attempt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;(\&lt;&#x2F;span&gt;&lt;span&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;NoOp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Dom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;focus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;request &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Cmd Msg
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;request &lt;&#x2F;span&gt;&lt;span&gt;query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Http&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;get
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; url &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;https:&#x2F;&#x2F;hn.algolia.com&#x2F;api&#x2F;v1&#x2F;search?query=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt; query
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; expect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Http&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;expectJson &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;GotResults&lt;&#x2F;span&gt;&lt;span&gt; resultsDecoder
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;resultsDecoder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Decoder Stories
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;resultsDecoder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;hits&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;list storyDecoder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;andThen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;succeed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Stories&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;storyDecoder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Decoder Story
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;storyDecoder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;map6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Story
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;objectID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;num_comments&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;points&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A fun√ß√£o &lt;code&gt;focusSearch&lt;&#x2F;code&gt; √© apenas um helper que retorna um comando para informar o runtime do Elm para focar em um elemento com uma &lt;code&gt;id&lt;&#x2F;code&gt; espec√≠fica e √© isso. Eu copiei esta fun√ß√£o inteira do elm guide.&lt;&#x2F;p&gt;
&lt;p&gt;A fun√ß√£o realmente importante vem em seguida: &lt;code&gt;request&lt;&#x2F;code&gt;. Ela recebe uma query string e cria um comando que ir√° rodar uma requisi√ß√£o HTTP. √â aqui que Elm brilha pra mim. Ap√≥s fazer a requisi√ß√£o o runtime ir√° mandar uma nova mensagem pra nossa aplica√ß√£o com os dados usando a mensagem &lt;code&gt;GotResults&lt;&#x2F;code&gt;, esperando um JSON que possa ser decodificado com sucesso pela fun√ß√£o &lt;code&gt;resultsDecoder&lt;&#x2F;code&gt;. Veja, tudo em Elm √© tipado ent√£o n√£o podemos simplesmente receber qualquer tipo de dado do servidor. Como o compilador saberia com quais tipos estamos lidando? √â por isso que temos que decodificar o JSON que recebemos, fazendo-o encaixar em algum tipo espec√≠fico. No nosso caso, precisamos que o nosso JSON retorne um tipo &lt;code&gt;Stories&lt;&#x2F;code&gt; v√°lido.&lt;&#x2F;p&gt;
&lt;p&gt;Se voc√™ der uma olhada na forma como lidamos com a mensagem &lt;code&gt;GotResults&lt;&#x2F;code&gt; na nossa fun√ß√£o &lt;code&gt;update&lt;&#x2F;code&gt;, vai ver que o dado que temos de volta pode ser &lt;code&gt;Ok ...&lt;&#x2F;code&gt; ou &lt;code&gt;Err ...&lt;&#x2F;code&gt;. Um &lt;code&gt;Err&lt;&#x2F;code&gt; pode ocorrer se a requisi√ß√£o HTTP falhar ou se a decodifica√ß√£o falhar.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;ainda-precisamos-de-js&quot;&gt;Ainda precisamos de JS...&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#fdf6e3;color:#657b83;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;* you can style your program here *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;app = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Elm&lt;&#x2F;span&gt;&lt;span&gt;.Main.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;      node: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;document&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;querySelector&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;      flags: localStorage.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getItem&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;searchTerm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Elm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    app.ports.sendQuery.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;query =&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;localStorage.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setItem&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;searchTerm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, query));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A parte importante do nosso HTML&#x2F;JS √© onde inicializamos a app. Na chamada √† fun√ß√£o &lt;code&gt;init&lt;&#x2F;code&gt; n√≥s passamos o valor atualmente guardado no nosso &lt;code&gt;localStorage&lt;&#x2F;code&gt;. D√™ uma olhada na fun√ß√£o &lt;code&gt;init&lt;&#x2F;code&gt; do lado do Elm para ver como lidamos com isto.&lt;&#x2F;p&gt;
&lt;p&gt;Depois, usamos o port &lt;code&gt;sendQuery&lt;&#x2F;code&gt; para salvar o termo de busca toda vez que uma nova busca ocorrer. Olhe em como lidamos com a mensagem &lt;code&gt;Search&lt;&#x2F;code&gt; na fun√ß√£o &lt;code&gt;update&lt;&#x2F;code&gt; para ver o uso do port &lt;code&gt;sendQuery&lt;&#x2F;code&gt; que definimos no in√≠cio de nosso m√≥dulo.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;aprendizados&quot;&gt;Aprendizados&lt;&#x2F;h1&gt;
&lt;p&gt;Eu n√£o tenho nenhuma experi√™ncia real com React ou Ember ent√£o esta se√ß√£o n√£o ser√° t√£o bem elaborada ou profunda quanto no artigo original. Mas vamos dar uma olhada em como Elm resolve alguns dos nosso problemas de maneira simples e eficientes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;custom-types-sao-incriveis&quot;&gt;Custom types s√£o incr√≠veis&lt;&#x2F;h2&gt;
&lt;p&gt;Na fun√ß√£o &lt;code&gt;storiesReducer&lt;&#x2F;code&gt; da implementa√ß√£o em React temos algo parecido com o que a nossa fun√ß√£o &lt;code&gt;update&lt;&#x2F;code&gt; faz. O problema √© que ele usa strings puras como chaves para as poss√≠veis a√ß√µes a serem executadas. Isso √© ok at√© voc√™ precisar de mais mensagens&#x2F;a√ß√µes.&lt;&#x2F;p&gt;
&lt;p&gt;Pelo fato de estarmos usando um custom type como nossas mensagens (a gente poderia usar strings mas elas n√£o seriam muito √∫teis), precisamos lidar com todas as possibilidades de mensagens que existem dentro deste tipo. Se precisarmos de mais mensagens, basta adicion√°-las ao tipo &lt;code&gt;Msg&lt;&#x2F;code&gt; e o compilador vai educadamente nos avisar de todos os lugares onde precisamos lidar com esta nova mensagem se esquecermos de algo.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;custom-types-sao-incriveis2&quot;&gt;Custom types s√£o incr√≠veis¬≤&lt;&#x2F;h2&gt;
&lt;p&gt;Tanto na implementa√ß√£o React quanto Ember voc√™ v√™ que o &amp;quot;model&amp;quot; tem algumas flags como &lt;code&gt;isLoading&lt;&#x2F;code&gt; ou &lt;code&gt;isError&lt;&#x2F;code&gt;. Tudo o que essas flags fazem √© informar o estado dos resultados que estamos tentando carregar. Veja como sempre √© necess√°rio resetar estes valores pra n√£o acontecer de termos a informa√ß√£o de erro enquanto carregamos algo ao mesmo tempo. Nada impede isso de realmente acontecer...&lt;&#x2F;p&gt;
&lt;p&gt;Podemos resolver isto com custom types que representam um estado dos resultados por vez. N√£o √© poss√≠vel termos a situa√ß√£o &lt;code&gt;Loading&lt;&#x2F;code&gt; e &lt;code&gt;Error&lt;&#x2F;code&gt; ao mesmo tempo, assim temos certeza que nossa view sempre ir√° renderizar a coisa certa.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;decodificacao-de-json&quot;&gt;Decodifica√ß√£o de JSON&lt;&#x2F;h2&gt;
&lt;p&gt;A gente tem um bug nessa app. O t√≠tulo ou autor de uma hist√≥ria podem ter um valor &lt;code&gt;null&lt;&#x2F;code&gt; vindo da chamada da API. Se eu abrir as apps React ou Ember e procurar por algo como &amp;quot;elmish&amp;quot; por exemplo, voc√™ vai ver algumas linhas esquisitas. Isso acontece porque JavaScript n√£o vai te impedir de acessar dados que n√£o existem em um objeto, renderizando uma lista confusa e pouco informativa de... coisas.&lt;&#x2F;p&gt;
&lt;p&gt;Isso n√£o pode acontecer com Elm. Al√©m do fato de termos usados tipos alias para informar o compilador sobre a forma das nossas estruturas, quando recebemos dados do mundo exterior ele precisa passar por um processo de decodifica√ß√£o e este processo pode ser bem sucedido ou n√£o: Elm nos for√ßa a lidar com ambas as situa√ß√µes ou nosso programa n√£o compila. Procure por &amp;quot;elmish&amp;quot; na vers√£o Elm e voc√™ ver√° a mensagem &amp;quot;Something went wrong...&amp;quot; (Algo de errado aconteceu...). Isto acontece porque nosso decoder s√≥ decodifica strings para a chave &lt;code&gt;title&lt;&#x2F;code&gt; e se temos um &lt;code&gt;null&lt;&#x2F;code&gt; do lado do JSON, ele n√£o consegue decodificar.&lt;&#x2F;p&gt;
&lt;p&gt;N√≥s poder√≠amos ent√£o atualizar nosso decodificador para lidar com estas situa√ß√µes, talvez fazendo o &lt;code&gt;title&lt;&#x2F;code&gt; ser um &lt;code&gt;Maybe String&lt;&#x2F;code&gt;, e isto nos for√ßaria a lidar com o fato de que &lt;code&gt;title&lt;&#x2F;code&gt; pode ser tanto &lt;code&gt;Just ...&lt;&#x2F;code&gt; quando &lt;code&gt;Nothing&lt;&#x2F;code&gt; em nossa fun√ß√£o de &lt;code&gt;view&lt;&#x2F;code&gt;. Nunca ser√≠amos capazes de reproduzir as linhas confusas e bobas que temos quando usamos &amp;quot;apenas&amp;quot; Javascript.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;uma-abordagem-simples&quot;&gt;Uma abordagem simples&lt;&#x2F;h2&gt;
&lt;p&gt;Hooks, components, tracked properties, actions, etc... Aplica√ß√µes do mundo JS podem ter muitos conceitos que requerem tempo para aprender e dominar. Por outro lado, Elm √© super simples. Apesar da sua sintaxe esquisita, se voc√™ nunca lidou com algo parecidoa antes, Elm introduz pouqu√≠ssimos conceitos: tudo √© fun√ß√£o, e a forma como a sua aplica√ß√£o funciona √© atrav√©s de itera√ß√µes da TEA, s√≥ isso.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Eu sinto que estou sendo superficial em compara√ß√£o ao artigo t√£o bem informado e bem escrito no qual este foi baseado, mas eu espero ter tido algum sucesso em mostrar como Elm solucionaria problemas similares apontando para as coisas animadoras que a linguagem traz √† mesa.&lt;&#x2F;p&gt;
&lt;p&gt;O que eu estou esquecendo da minha lista de aprendizados? Existe algum lugar onde as solu√ß√µes React&#x2F;Ember sejam melhores? Por favor, mande seus coment√°rios. At√© breve!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Elixir para desenvolvedores PHP - Paradigma de programa√ß√£o</title>
		<published>2019-10-01T00:00:00+00:00</published>
		<updated>2019-10-01T00:00:00+00:00</updated>
		<link rel="alternate" href="http://www.eberfdias.com/blog/elixir-para-desenvolvedores-php-parte-i/" type="text/html"/>
		<id>http://www.eberfdias.com/blog/elixir-para-desenvolvedores-php-parte-i/</id>
		<content type="html">&lt;p&gt;Quando quero aprender algo novo tento achar algum material comparando o que quero aprender com algo que eu j√° conhe√ßa. Assim posso medir os pros e contras e decidir se devo investir meu tempo nisso.&lt;&#x2F;p&gt;
&lt;p&gt;Eu venho do mundo do PHP e me apaixonei por Elixir ent√£o minha ideia aqui √© comparar alguns aspectos destas linguagens e mostrar como elas s√£o diferentes (ou similares) e talvez te ajudar a tomar a decis√£o de aprender mais sobre ela. Espero te mostrar que Elixir √© uma linguagem divertida de se trabalhar!&lt;&#x2F;p&gt;
&lt;p&gt;Ali√°s, sou iniciante no mundo Elixir. Esta √© a perspectiva de algu√©m escrevendo enquanto aprende a linguagem ent√£o leve isto em considera√ß√£o.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;elixir-e-uma-linguagem-funcional&quot;&gt;Elixir √© uma linguagem funcional&lt;&#x2F;h2&gt;
&lt;p&gt;A primeira grande diferen√ßa entre PHP e Elixir √© que Elixir √© uma linguagem funcional pura. PHP, no entanto, √© uma linguagem multi-paradigma, onde voc√™ pode resolver problemas usando diferentes paradigmas embora POO (programa√ß√£o orientada a objetos) seja bem dominante hoje em dia.&lt;&#x2F;p&gt;
&lt;p&gt;E o que FP (functional programming ou programa√ß√£o funcional) significa? A teoria pode ficar bem pesada e talvez voc√™ queira ler o artigo na &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Functional_programming&quot;&gt;Wikipedia&lt;&#x2F;a&gt; para uma descri√ß√£o mais elaborada, mas em resumo e para os prop√≥sitos desta compara√ß√£o, significa que &lt;strong&gt;n√£o existem objetos&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Um objeto em POO √© (al√©m de outras coisas) quando voc√™ junta dados e funcionalidades: no mesmo objeto voc√™ tem o estado e os m√©todos para afetar este estado.&lt;&#x2F;p&gt;
&lt;p&gt;Mas em FP estas coisas s√£o separadas e tudo o que voc√™ tem s√£o fun√ß√µes que manipulam dados. Vamos dar uma olhada em como isso se parece:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#fdf6e3;color:#657b83;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;DataLayer
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;__construct&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;email &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;user &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;John Doe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;john.doe@example.com&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;save&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;O equivalente em Elixir do c√≥digo anterior seria algo mais ou menos assim:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elixir&quot; style=&quot;background-color:#fdf6e3;color:#657b83;&quot; class=&quot;language-elixir &quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;defmodule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;defstruct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;email: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;save&lt;&#x2F;span&gt;&lt;span&gt;(%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;{} = user) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Repo&lt;&#x2F;span&gt;&lt;span&gt;.insert(user)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;John Doe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;email: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;john.doe@example.com&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;.save()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Existe muita coisa acontecendo aqui. A sintaxe √© um pouco alien se comparada √† do PHP. Sem colchetes, e o que √© aquela atribui√ß√£o na defini√ß√£o da fun√ß√£o? Bem, chegaremos l√° mas s√≥ pra esclarecer, aquilo &lt;strong&gt;n√£o √©&lt;&#x2F;strong&gt; uma atribui√ß√£o.&lt;&#x2F;p&gt;
&lt;p&gt;O que fizemos aqui foi criar uma &lt;code&gt;struct&lt;&#x2F;code&gt; que √© um &lt;code&gt;map&lt;&#x2F;code&gt; glorificado. Um &lt;code&gt;map&lt;&#x2F;code&gt; √© similar a um array associativo em PHP onde voc√™ tem chaves e valores. A diferen√ßa entre um &lt;code&gt;map&lt;&#x2F;code&gt; e uma &lt;code&gt;struct&lt;&#x2F;code&gt; √© que com a &lt;code&gt;struct&lt;&#x2F;code&gt; voc√™ pode estruturar como seus dados devem se parecer, definindo chaves espec√≠ficas e at√© mesmo valores padr√£o (voc√™ pode estar pensando agora &amp;quot;uhm, isso parece um objeto&amp;quot; mas &lt;strong&gt;n√£o √©&lt;&#x2F;strong&gt;, s√£o apenas dados).&lt;&#x2F;p&gt;
&lt;p&gt;Outra coisa que voc√™ deve ter percebido √© que n√£o temos nenhum tipo de heran√ßa. No c√≥digo PHP fica pressuposto que o m√©todo &lt;code&gt;save&lt;&#x2F;code&gt; vem da classe &lt;code&gt;DataLayer&lt;&#x2F;code&gt; da qual a nossa classe &lt;code&gt;User&lt;&#x2F;code&gt; extende mas no c√≥digo Elixir a fun√ß√£o &lt;code&gt;save&lt;&#x2F;code&gt; est√° apenas chamando uma outra fun√ß√£o de um outro m√≥dulo (&lt;code&gt;Repo&lt;&#x2F;code&gt; neste caso) para persistir os dados no nosso banco.&lt;&#x2F;p&gt;
&lt;p&gt;Em FP voc√™ tem dados e fun√ß√µes por todos os lados e seu trabalho √© &lt;strong&gt;compor&lt;&#x2F;strong&gt; estas coisas para criar outras coisas maiores que tamb√©m podem compor outras coisas.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mas-php-tambem-tem-funcoes&quot;&gt;Mas PHP tamb√©m tem fun√ß√µes...&lt;&#x2F;h2&gt;
&lt;p&gt;O c√≥digo Elixir tamb√©m poderia ser traduzido para PHP mais ou menos assim:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#fdf6e3;color:#657b83;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;save&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bool
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;DataLayer&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;persist&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;user &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;John Doe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;john.doe@example.com&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;save&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ent√£o PHP pode ser funcional certo? Bom, certo... Eu acho? Como disse no in√≠cio, Elixir √© uma linguagem funcional &lt;strong&gt;pura&lt;&#x2F;strong&gt;. Isso siginifica que n√£o existem &amp;quot;atalhos&amp;quot; pra fora deste mundo quando usamos Elixir.&lt;&#x2F;p&gt;
&lt;p&gt;Em PHP voc√™ pode desenvolver usando um &amp;quot;estilo funcional&amp;quot; mas nunca ser√° funcional de verdade. Voc√™ pode ficar &amp;quot;pregui√ßoso&amp;quot; e apenas tirar vantagem da natureza multi-paradigma da linguagem para resolver alguns problemas e, na realidade, seria melhor assim pois PHP n√£o √© uma linguagem funcional.&lt;&#x2F;p&gt;
&lt;p&gt;E FP n√£o se caracteriza apenas pela aus√™ncia de objetos. Se voc√™ teve a curiosidade de ler aquele artigo da Wikipedia viu que este paradigma inclui outras coisas como:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Fun√ß√µes de primeira classe&lt;&#x2F;li&gt;
&lt;li&gt;Fun√ß√µes totais&lt;&#x2F;li&gt;
&lt;li&gt;Fun√ß√µes puras&lt;&#x2F;li&gt;
&lt;li&gt;Imutabilidade&lt;&#x2F;li&gt;
&lt;li&gt;Recurs√£o&lt;&#x2F;li&gt;
&lt;li&gt;Uso pesado de &lt;del&gt;drogas&lt;&#x2F;del&gt; teorias matem√°ticas&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;E muitas outras coisas...&lt;&#x2F;p&gt;
&lt;p&gt;Algumas destas coisas podem at√© aparecer em PHP. Fun√ß√µes de primeira classe entraram na linguagem com closures na vers√£o 5.3. Outras voc√™ definitivamente n√£o ter√° como &lt;strong&gt;imutabilidade&lt;&#x2F;strong&gt; que √© um aspecto gigantesco de FP.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;e-como-isto-e-melhor&quot;&gt;E como isto √© melhor?&lt;&#x2F;h2&gt;
&lt;p&gt;Agora voc√™ j√° tem alguma ideia do que √© FP e como ela se difere de POO mas ela √© melhor? Sim e n√£o. Algumas pessoas v√£o dizer que cada paradigma tem seu lugar no mundo e est√£o tentando resolver problemas diferentes, mas no final das contas, FP oferece uma forma diferente de se olhar para programa√ß√£o.&lt;&#x2F;p&gt;
&lt;p&gt;Ao inv√©s de pensar em objetos, seus atributos e m√©todos, voc√™ pensa apenas em dados e em como transform√°-los com fun√ß√µes. √â uma perspectiva mais simples mas muito poderosa.&lt;&#x2F;p&gt;
&lt;p&gt;Sem fortes padr√µes e consist√™ncia, programas OO podem rapidamente se tornar insustent√°veis. Com FP voc√™ pode evitar muitas destas armadilhas escrevendo um c√≥digo mais simples, que √© mais f√°cil de escrever e refatorar. N√£o me entanda mal, voc√™ ainda pode estragar tudo usando FP mas alguns dos problemas mais comuns na arquitetura de programas com OO simplesmente n√£o existem em FP.&lt;&#x2F;p&gt;
&lt;p&gt;Existem in√∫meros artigos por a√≠ que v√£o te mostrar como FP pode ser um paradigma forte e eu sugiro que voc√™ d√™ uma olhada. Sei que existem muitas pontas soltas neste artigo mas eu estou apenas tentando fazer uma intrudu√ß√£o interessante. A ideia √© mergulhar mais fundo em alguns destes conceitos em artigos futuros.&lt;&#x2F;p&gt;
&lt;p&gt;Me avise se voc√™ estiver interessado em algum assunto espec√≠fico. Eu posso falar sobre ele num pr√≥ximo artigo.&lt;&#x2F;p&gt;
&lt;p&gt;Obrigado pela leitura!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Stripe</title>
		<published>2013-05-17T00:00:00+00:00</published>
		<updated>2013-05-17T00:00:00+00:00</updated>
		<link rel="alternate" href="http://www.eberfdias.com/blog/stripe/" type="text/html"/>
		<id>http://www.eberfdias.com/blog/stripe/</id>
		<content type="html">&lt;p&gt;Isso j√° faz muito tempo, quase um ano e meio, mas eu me lembrei desse epis√≥dio hoje e quis contar aqui, porque foi muito legal.&lt;&#x2F;p&gt;
&lt;p&gt;Na √©poca, o servi√ßo &lt;a href=&quot;https:&#x2F;&#x2F;stripe.com&#x2F;&quot;&gt;Stripe&lt;&#x2F;a&gt;, uma solu√ß√£o de pagamentos para desenvolvedores, tinha sido lan√ßado a pouco tempo.  Na hora eu fiquei sedento por um neg√≥cio assim funcionando no Brasil.  A√≠ eu resolvi mandar um e-mail pra eles.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Subject: Please, come to Brazil! I&#x27;m beggin&#x27; you!&lt;&#x2F;p&gt;
&lt;p&gt;Please, I&#x27;m literally begging!&lt;&#x2F;p&gt;
&lt;p&gt;--
√âber Freitas Dias&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Junto √† mensagem eu mandei essa foto...&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;2013-05-17-stripe&#x2F;help.jpg&quot; alt=&quot;Stripe&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Mal sabia eu que pouqu√≠ssimo tempo depois de ter mandado a mensagem eles se responderiam.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Subject: Re: Please, come to Brazil! I&#x27;m beggin&#x27; you!&lt;&#x2F;p&gt;
&lt;p&gt;Hi Eber,&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;re working on it!&lt;&#x2F;p&gt;
&lt;p&gt;Best,
Patrick&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Junto com esta foto...&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;imgs&#x2F;2013-05-17-stripe&#x2F;stripe.jpg&quot; alt=&quot;Stripe&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Algumas coisas legais nessa hist√≥ria:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Eles me responderam no mesmo dia, isso foi demais;&lt;&#x2F;li&gt;
&lt;li&gt;O pr√≥prio fundador do Stripe me respondeu, o que tamb√©m foi bem legal;&lt;&#x2F;li&gt;
&lt;li&gt;A foto no e-mail foi a cereja no bolo. Dei muita risada quando vi.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Mesmo sem os caras oferecerem o servi√ßo aqui no Brasil, eu j√° tive uma boa experi√™ncia com eles. Isso diz alguma coisa a respeito da empresa. √â claro que na √©poca eles eram bem menores e talvez tenham se surpreendido com a minha mensagem+foto. Talvez hoje a resposta n√£o seria exatamente assim, mas quero acreditar que seria bem similar.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Experimentando o DuckDuckGo</title>
		<published>2012-02-18T00:00:00+00:00</published>
		<updated>2012-02-18T00:00:00+00:00</updated>
		<link rel="alternate" href="http://www.eberfdias.com/blog/experimentando-o-duckduckgo/" type="text/html"/>
		<id>http://www.eberfdias.com/blog/experimentando-o-duckduckgo/</id>
		<content type="html">&lt;p&gt;No in√≠cio desta semana troquei o mec√¢nismo de busca padr√£o no meu navegador para o &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;duckduckgo.com&#x2F;&quot;&gt;DuckDuckGo&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Pra quem n√£o sabe, o &lt;strong&gt;DDG&lt;&#x2F;strong&gt; (DuckDuckGo) √© um novo mec√¢nismo de busca que se preocupa com minha privacidade. Toda a hist√≥ria √© muito longa, mas basicamente, quando voc√™ usa o DDG, ningu√©m (nem eles mesmos) sabe pelo que voc√™ buscou e os sites pra onde voc√™ vai a partir dele tamb√©m n√£o conseguem visualizar de onde voc√™ veio. &lt;a href=&quot;http:&#x2F;&#x2F;donttrack.us&#x2F;&quot;&gt;Neste site&lt;&#x2F;a&gt; eles explicam tudo isso muito direitinho.&lt;&#x2F;p&gt;
&lt;p&gt;Outra coisa diferente que eles fazem √© n√£o personalizar os resultados de acordo com seus hist√≥ricos de busca ou vida na internet, coisa que o Google anda fazendo com muita frequ√™ncia (explicado muito bem &lt;a href=&quot;http:&#x2F;&#x2F;dontbubble.us&#x2F;&quot;&gt;aqui&lt;&#x2F;a&gt;) e que eu, particularmente, n√£o gosto.&lt;&#x2F;p&gt;
&lt;p&gt;√â claro que por ser um mec√¢nismo novo e (ainda) pequeno ele n√£o √© t√£o poderoso quanto o Google, mas aos poucos voc√™ aprende a utiliz√°-lo com tanta efici√™ncia quanto.&lt;&#x2F;p&gt;
&lt;p&gt;Outra grande facilidade do DDG s√£o os !Bangs. √â basicamente um atalho para voc√™ realizar buscas em quaisquer outros sites, inclusive Google ou Bing, ent√£o √© bem f√°cil, caso eu n√£o encontre nenhum resultado satisfat√≥rio no DDG, fazer a mesma busca no Google, ex.: &amp;quot;!g meu termo de busca&amp;quot;. Voc√™ tamb√©m pode buscar diretamente pelo Google Images (!gi), Amazon (!a), GitHub (!gh) e at√© algumas outras coisas mais nerds como !php, !mysql e etc. Para ter uma id√©ia total de todos os !Bangs dispon√≠veis √© s√≥ ver &lt;a href=&quot;https:&#x2F;&#x2F;duckduckgo.com&#x2F;bang.html&quot;&gt;este link&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Enfim, estes s√£o s√≥ alguns dos recursos legais do DDG. Existem muitos outros, todos muito legais e divertidos. Com tantas facilidades dentro de uma ferramenta s√≥, acho que n√£o vou sentir tanta falta de ter o Google como mec√¢nismo padr√£o, j√° que posso us√°-lo de forma at√© mais segura via DDG.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Meu ambiente de trabalho</title>
		<published>2011-07-01T00:00:00+00:00</published>
		<updated>2011-07-01T00:00:00+00:00</updated>
		<link rel="alternate" href="http://www.eberfdias.com/blog/meu-ambiente-de-trabalho/" type="text/html"/>
		<id>http://www.eberfdias.com/blog/meu-ambiente-de-trabalho/</id>
		<content type="html">&lt;p&gt;Por um tempo eu fiquei usando Linux como meu sistema operacional. Sem dual boot nem nada, s√≥ Linux (Ubuntu). Depois de passar um bom tempo usando descobri que, por mais que eu adore o Linux e suas ferramentas, ele s√≥ brilha mesmo na linha de comando. Linux para desktop ainda est√° longe de ser ideal e eu me vi sentindo saudades do Windows, principalmente depois de ter experimentado o Win7, que est√° excelente.&lt;&#x2F;p&gt;
&lt;p&gt;Tomei a dura decis√£o de que eu devia voltar para o Windows, mas agora existia um problema. Todo o meu ambiente de trabalho estava focado no Linux e eu precisava arranjar um jeito de conseguir trabalhar com as duas plataformas em conjunto.  Entrei no Forrst e perguntei se era poss√≠vel criar uma VM e trabalhar nela com as aplica√ß√µes que eu precisava mas realizar toda a interface atrav√©s do Windows.  Foi a√≠ que algu√©m me sugeriu o &lt;a href=&quot;http:&#x2F;&#x2F;vagrantup.com&#x2F;&quot;&gt;Vagrant&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;De cara eu me apaixonei pelo Vagrant. Achei a id√©ia sensacional. Basicamente ela √© uma ferramenta de linha de comando que te permite configurar maquinas virtuais com extrema facilidade e us√°-las para desenvolver dentro do seu sistema operacional de escolha. Pode ser Windows, OS X, o pr√≥prio linux, o que for, bastando ser possivel instalar Ruby e VirtualBox. O legal √© que eu poderia reproduzir o servidor virtual que eu realmente vou usar em produ√ß√£o no meu ambiente de desenvolvimento e trabalhar sem me preocupar em adequar os ambientes. O Vagrant me permitia configurar uma pasta local a ser compartilhada na VM e eu poderia fazer todo o desenvolvimento a partir do pr√≥prio Windows.&lt;&#x2F;p&gt;
&lt;p&gt;O Vagrant √© √≥timo! Ainda mais se voc√™ aprender a usar &lt;a href=&quot;http:&#x2F;&#x2F;www.puppetlabs.com&#x2F;puppet&#x2F;introduction&#x2F;&quot;&gt;Puppet&lt;&#x2F;a&gt; ou &lt;a href=&quot;http:&#x2F;&#x2F;www.opscode.com&#x2F;chef&#x2F;&quot;&gt;Chef&lt;&#x2F;a&gt; para gerenciar as depend√™ncias dos pacotes utilizados na m√°quina, mas existiam alguns problemas que eu n√£o conseguia resolver. O principal &amp;quot;problema&amp;quot; √© que o servidor tinha que usar a porta 8080, ou qualquer outra porta acima de 1024 (acho que √© isso), por alguma limita√ß√£o de n√£o sei o que. Isso acabava me atrapalhando um bocado na hora de trabalhar com URLs a partir do meu pr√≥prio sistema operacional uma vez que o meu framework √†s vezes n√£o levava isso em considera√ß√£o.&lt;&#x2F;p&gt;
&lt;p&gt;Eu tentei ent√£o montar meu pr√≥prio Vagrant. Criei uma nova VM no VirtualBox com uma imagem do Ubuntu Server Edition configurando a rede para funcionar em modo bridge. Depois disso editei o arquivo &lt;strong&gt;&#x2F;etc&#x2F;network&#x2F;interfaces&lt;&#x2F;strong&gt; de forma que ele ficasse com o seguinte conte√∫do:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;color:#657b83;&quot;&gt;&lt;code&gt;&lt;span&gt;# This file describes the network interfaces available on your system
&lt;&#x2F;span&gt;&lt;span&gt;# and how to activate them. For more information, see interfaces(5).
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# The loopback network interface
&lt;&#x2F;span&gt;&lt;span&gt;auto lo
&lt;&#x2F;span&gt;&lt;span&gt;iface lo inet loopback
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# The primary network interface
&lt;&#x2F;span&gt;&lt;span&gt;auto eth0
&lt;&#x2F;span&gt;&lt;span&gt;# iface eth0 inet dhcp
&lt;&#x2F;span&gt;&lt;span&gt;iface eth0 inet static
&lt;&#x2F;span&gt;&lt;span&gt;    address 192.168.1.200
&lt;&#x2F;span&gt;&lt;span&gt;    netmask 255.255.255.0
&lt;&#x2F;span&gt;&lt;span&gt;    network 192.168.1.1
&lt;&#x2F;span&gt;&lt;span&gt;    broadcast 192.168.1.255
&lt;&#x2F;span&gt;&lt;span&gt;    gateway 192.168.1.1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ao reiniciar a VM agora ela tinha um IP local fixo na minha rede: 192.168.1.200.&lt;&#x2F;p&gt;
&lt;p&gt;Depois eu criei uma pasta compartilhada no VirtualBox e instalei os Add-ons do VirtualBox na VM para poder usar a nova pasta. Criei um arquivo chamado &lt;strong&gt;.&#x2F;mount&lt;&#x2F;strong&gt; com alguns comandos que me ajudavam a montar e remontar a pasta quando precisasse. O conte√∫do do arquivo √© o seguinte:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;color:#657b83;&quot;&gt;&lt;code&gt;&lt;span&gt;#!&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span&gt;sudo umount &#x2F;home&#x2F;eber&#x2F;mnt
&lt;&#x2F;span&gt;&lt;span&gt;sudo mount -t vboxsf folder &#x2F;home&#x2F;eber&#x2F;mnt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Eu desmonto a pasta antes de montar porque por algum motivo bizarro, os arquivos est√°ticos (js, css e etc) quebram quando eu atualizo seus conte√∫dos mas n√£o dou um refresh na pasta montada. Assim fica f√°cil fazer o refresh sempre que for preciso.&lt;&#x2F;p&gt;
&lt;p&gt;Em seguida eu precisava tornar simples iniciar e finalizar a m√°quina virtual no Windows. Eu dei uma olhada no codigo do Vagrant e perguntei por a√≠ e consegui fazer dois arquivinhos que me ajudam nisso. Um deles √© o &lt;strong&gt;start.bat&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;color:#657b83;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;quot;c:\Program Files\Oracle\VirtualBox\VBoxManage.exe&amp;quot; startvm Ubuntu --type headless
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;E o outro √© o &lt;strong&gt;stop.bat&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;color:#657b83;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;quot;c:\Program Files\Oracle\VirtualBox\VBoxManage.exe&amp;quot; controlvm Ubuntu poweroff
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A m√°quina √© iniciada com o tipo headless, ou seja, roda &amp;quot;em background&amp;quot; (embora uma janela do CMD do Windows fique aberta, o que n√£o √© t√£o background assim).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;[EDIT 08&#x2F;08&#x2F;2011]&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;O √∫nico problema de usar o m√©todo acima √© que, na verdade, o processo da VM n√£o √© realmente &lt;em&gt;headless&lt;&#x2F;em&gt; no Windows, j√° uma janela da linha de comando fica aberta. Eu procurei por alternativas e achei um &lt;a href=&quot;http:&#x2F;&#x2F;vbox.innotek.de&#x2F;ticket&#x2F;3549&quot;&gt;ticket&lt;&#x2F;a&gt; no tracker do VBox falando exatamente sobre isso. Depois de ler tudo, existia a sugest√£o de usar um VBS (Visual Basic Script) pra abrir a VM. A√≠ vai:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;color:#657b83;&quot;&gt;&lt;code&gt;&lt;span&gt;Set objShell = WScript.CreateObject(&amp;quot;WScript.Shell&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;objShell.Run &amp;quot;&amp;quot;&amp;quot;C:\Program Files\Oracle\VirtualBox\VBoxHeadless.exe&amp;quot;&amp;quot; --startvm Ubuntu --vrdp=off&amp;quot;, 0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Se o nome de sua VM for composto, tipo &amp;quot;Ubuntu Server&amp;quot; voc√™ s√≥ precisa colocar o nome entre duas aspas:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;color:#657b83;&quot;&gt;&lt;code&gt;&lt;span&gt;Set objShell = WScript.CreateObject(&amp;quot;WScript.Shell&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;objShell.Run &amp;quot;&amp;quot;&amp;quot;C:\Program Files\Oracle\VirtualBox\VBoxHeadless.exe&amp;quot;&amp;quot; --startvm &amp;quot;&amp;quot;Ubuntu Server&amp;quot;&amp;quot; --vrdp=off&amp;quot;, 0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;O que o script faz realmente eu n√£o sei, porque n√£o entendo nada de VBS, mas funciona :)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;[&#x2F;EDIT]&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Pronto! Agora eu consegui ter um ambiente de trabalho muito similar ao que eu tenho em produ√ß√£o e poderia usar o servidor web na porta 80 sem problemas. Tudo o que eu fiz depois disso foi configurar um acesso via SSH usando o Putty e adicionar entradas no arquivo &lt;strong&gt;c:\Windows\System32\Drivers\etc\hosts&lt;&#x2F;strong&gt; apontando para o IP da m√°quina virtual. Como o IP √© fixo, fica f√°cil manter a rela√ß√£o.&lt;&#x2F;p&gt;
&lt;p&gt;Parece que √© muito mais trabalho que usar Vagrant e n√£o t√™m os benef√≠cios de redistribui√ß√£o que o Vagrant tem, por isso dependendo da forma como voc√™ trabalha, usar Vagrant √© muito melhor e mais pr√°tico. Mas foi divertido configurar este ambiente e tem funcionado perfeitamente pra mim desde ent√£o.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>De volta ao cliente web do Google Mail</title>
		<published>2011-06-30T00:00:00+00:00</published>
		<updated>2011-06-30T00:00:00+00:00</updated>
		<link rel="alternate" href="http://www.eberfdias.com/blog/de-volta-ao-cliente-web-do-google-mail/" type="text/html"/>
		<id>http://www.eberfdias.com/blog/de-volta-ao-cliente-web-do-google-mail/</id>
		<content type="html">&lt;p&gt;A algum tempo atras o Google come√ßou a tratar as contas do Google Apps como uma conta comum de forma que n√£o era poss√≠vel estar logado no meu e-mail @gmail.com e numa conta do Apps ao mesmo tempo.&lt;&#x2F;p&gt;
&lt;p&gt;No come√ßo isso foi bem ruim. Eu j√° estava acostumado a deixar v√°rias abas abertas no meu browser com as caixas de e-mail que eu usava, mas agora isso n√£o seria poss√≠vel. Eu comecei ent√£o a procurar um cliente desktop de e-mails legal, que pudesse substituir o cliente web do Google, tarefa dif√≠cil.&lt;&#x2F;p&gt;
&lt;p&gt;Depois de muito ca√ßar eu achei o Postbox, um √≥timo cliente de e-mail baseado no Thunderbird. O problema √© que, aparentemente, nenhum cliente de e-mails consegue superar o cliente web do Google. Eu descobri hoje que d√° pra voc√™; fazer login em mais de uma conta do Google, o que me deixa estar, ao mesmo tempo, conectado a diversas caixas de e-mail  diferentes.&lt;&#x2F;p&gt;
&lt;p&gt;S√≥ procurei descobrir isso porque eu realmente queria voltar a usar o cliente do Google. O Postbox √© bom, mas ficou faltando algumas coisas:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;O Postbox organiza as mensagens em conversas, mas n√£o mostra as mensagens que voc√™ enviou, s√≥ as que a outra pessoa mandou. Isso √© muito chato quando voc√™ tenta acompanhar uma conversa de verdade.&lt;&#x2F;li&gt;
&lt;li&gt;O Postbox n√£o consegue trabalhar direito com e-mails encaminhados ou colocando as mensagens antigas como cita√ß√µes. Ele peca um pouco por tentar fazer demais (colocar avatar dos participantes na conversa, estilizar a cita√ß√£o do e-mail sendo respondido e etc.).&lt;&#x2F;li&gt;
&lt;li&gt;N√£o √© t√£o f√°cil organizar as mensagens em labels (no caso, pastas) e os filtros fazem muita falta.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Bom, devem existir dezenas de outros motivos, mas eu estou feliz que agora posso voltar a usar o cliente de e-mails do Google. Se voc√™ quiser saber como usar multiplas contas no mesmo browser, o Google tem um artigo &lt;a href=&quot;http:&#x2F;&#x2F;www.google.com&#x2F;support&#x2F;accounts&#x2F;bin&#x2F;answer.py?answer=181599&quot;&gt;aqui&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Braintest</title>
		<published>2007-10-21T00:00:00+00:00</published>
		<updated>2007-10-21T00:00:00+00:00</updated>
		<link rel="alternate" href="http://www.eberfdias.com/blog/braintest/" type="text/html"/>
		<id>http://www.eberfdias.com/blog/braintest/</id>
		<content type="html">&lt;p&gt;Vi &lt;a href=&quot;http:&#x2F;&#x2F;mindmedia.com&#x2F;braintest.html&quot;&gt;este teste&lt;&#x2F;a&gt; no blog do &lt;a href=&quot;http:&#x2F;&#x2F;anderson.the-silvas.com&#x2F;&quot;&gt;Anderson&lt;&#x2F;a&gt; e resolvi fazer. Olha o meu resultado:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Eber, you are somewhat left-hemisphere dominant and show a preference for
visual learning, although not extreme in either characteristic. You probably
tend to do most things in moderation, but not always. Your left-hemisphere
dominance implies that your learning style is organized and structured, detail
oriented and logical. Your visual preference, though, has you seeking
stimulation and multiple data. Such an outlook can overwhelm structure and
logic and create an almost continuous state of uncertainty and agitation. You
may well suffer a feeling of continually trying to &amp;quot;catch up&amp;quot; with yourself.
Your tendency to be organized and logical and attend to details is reasonably
well-established which should afford you success regardless of your chosen
field of endeavor. You can &amp;quot;size up&amp;quot; situations and take in information
rapidly. However, you must then subject that data to being classified and
organized which causes you to &amp;quot;lose touch&amp;quot; with the immediacy of the problem.
Your logical and methodical nature hamper you in this regard though in the
long run it may work to your advantage since you &amp;quot;learn from experience&amp;quot; and
can go through the process more rapidly on subsequent occasions. You remain
predominantly functional in your orientation and practical. Abstraction and
theory are secondary to application. In keeping with this, you focus on
details until they manifest themselves in a unique pattern and only then work
with the &amp;quot;larger whole.&amp;quot;  With regards to your career choices, you have a
mentality that would be good as a scientist, coach, athlete, design
consultant, or an engineering technician. You can &amp;quot;see where you want to go&amp;quot;
and even be able to &amp;quot;tell yourself,&amp;quot; but find that you are &amp;quot;fighting yourself&amp;quot;
at the darndest times.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;As porcentagens foram as seguintes:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Auditory : 27%&lt;&#x2F;p&gt;
&lt;p&gt;Visual : 72%&lt;&#x2F;p&gt;
&lt;p&gt;Left : 68%&lt;&#x2F;p&gt;
&lt;p&gt;Right : 31%&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
	</entry>
</feed>
